# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ò–ú–ü–û–†–¢ –ë–ò–ë–õ–ò–û–¢–ï–ö –¢–ì –î–õ–Ø –ë–û–¢–ê ---------------------------------------------------------

import re
import os
from dotenv import load_dotenv
import random
from telegram.constants import ChatType
from telegram import (
    Update,
    ChatPermissions,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    BotCommandScopeChatAdministrators,
    BotCommandScopeChat,
    BotCommandScopeDefault,
    MenuButtonCommands,
)
from datetime import timedelta, datetime
from telegram.ext import ChatMemberHandler, CallbackQueryHandler, ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# –õ–û–ì –î–ï–ë–ê–ì–ê –û–¢–î–ï–õ–¨–ù–´–ô –ß–ê–¢
DEBUG_CHAT_ID = int(os.getenv("DEBUG_CHAT_ID"))

def debug_log_sync(text: str):
    print(f"[DEBUG] {text}")

async def debug_log(context, text: str):
    print(f"{text}")
    try:
        await context.bot.send_message(
            chat_id=DEBUG_CHAT_ID,
            text=f"{text}",
            disable_notification=True
        )
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ë–û–¢–ê ---------------------------------------------------------

TOKEN = os.getenv("BOT_TOKEN")


SOURCE_CHAT_ID = -1001887222284  # ID –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
TARGET_CHAT_ID = -1002443521655  # ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
TOPIC_ID_BY_HASHTAG = { # —Ö—ç—à—Ç–µ–≥–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–º
    '#–±–∞—Ä–∞—Ö–æ–ª–∫–∞': 2,
    '#–æ—Ü–µ–Ω–∏—Ç–µ_—Å–µ—Ç–∞–ø': 6,
    '#–ø–æ—á—É–≤—Å—Ç–≤—É–π_–±–æ–ª—å': 7,
    '#–∫–∫–∫–æ–º–±–æ': 9,
    '#—Ç–µ—Å—Ç—ã_–º–∞–≥–Ω–∏—Ç–æ–∫': 11,
    '#–∫–æ–ª–ª–µ–∫—Ü–∏—è': 12,
    '#–Ω–æ–≤–æ—Å—Ç–∏': 17,
    '#—Ç–µ—Å—Ç—ã_–º—ã—à–µ–∫': 20
}

# –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –¢–ì–ö –ü–û –•–≠–®–¢–ï–ì–£
async def forward_by_hashtag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.channel_post

    if not message:
        await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] –ù–µ—Ç channel_post ‚Äî —ç—Ç–æ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")
        return

    await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] channel_post –æ—Ç –∫–∞–Ω–∞–ª–∞ ID: {message.chat.id}")
    content = message.text or message.caption
    await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞: {content!r}")

    if content and message.chat.id == SOURCE_CHAT_ID:
        await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] –ö–∞–Ω–∞–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å SOURCE_CHAT_ID, –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Ç–µ–≥–∏...")
        for tag, topic_id in TOPIC_ID_BY_HASHTAG.items():
            if tag in content.lower():
                await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] –ù–∞—à–ª–∏ —Ç–µ–≥ '{tag}' ‚Üí —Ç–µ–º–∞ ID {topic_id}")
                try:
                    await context.bot.forward_message(
                        chat_id=TARGET_CHAT_ID,
                        from_chat_id=message.chat.id,
                        message_id=message.message_id,
                        message_thread_id=topic_id
                    )
                    await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ")
                except Exception as e:
                    await debug_log(context, "[–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ]: {e}")
                break
        else:
            await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] –ü–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        await debug_log(context, "[–ü–ï–†–ï–°–´–õ–ö–ê –ò–ó –¢–ì–ö] –õ–∏–±–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π, –ª–∏–±–æ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")



# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ö–û–ú–ê–ù–î–´ –ë–û–¢–£ –í –ß–ê–¢–ï ---------------------------------------------------------

# –ü–û–î–°–ö–ê–ó–ö–ò –ü–û –ö–û–ú–ê–ù–î–ê–ú
async def set_bot_commands(application):
    group_ids = [-1002443521655]  # ‚Üê —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–π –≤—Å–µ –Ω—É–∂–Ω—ã–µ chat_id

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
    await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    debug_log_sync("[CMD] ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")

    for chat_id in group_ids:
        debug_log_sync(f"[CMD] ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
        await application.bot.set_my_commands(
            commands=[
                BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"),
                BotCommand("rules", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã"),
            ],
            scope=BotCommandScopeChat(chat_id=chat_id)
        )

        # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        await application.bot.set_my_commands(
            commands=[
                BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"),
                BotCommand("rules", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã"),
                BotCommand("set_rules", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞"),
                BotCommand("ban", "–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                BotCommand("unban", "–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                BotCommand("kick", "–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                BotCommand("mute", "–û–±–µ–∑–∑–≤—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                BotCommand("unmute", "–°–Ω—è—Ç—å –º—É—Ç"),
            ],
            scope=BotCommandScopeChatAdministrators(chat_id=chat_id)
        )

    # –†–µ–∑–µ—Ä–≤: –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await application.bot.set_my_commands(
        commands=[
            BotCommand("rules", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã"),
        ],
        scope=BotCommandScopeDefault()
    )

    debug_log_sync("[CMD] ‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–ô –ö–ù–û–ü–û–ö –ú–ï–ù–Æ –í–°–ï–• –ö–û–ú–ê–ù–î
async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    data = query.data

    await query.answer()

    if data == "menu_rules":
        await query.message.reply_text("üìú –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã: ...")
        await debug_log(context, f"[MENU] üì• {user.full_name} ({user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü—Ä–∞–≤–∏–ª–∞'")
    elif data == "menu_rights":
        await query.message.reply_text("üîê –£ –≤–∞—Å –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞. –ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ban, /mute –∏ –¥—Ä—É–≥–∏–µ.")
        await debug_log(context, f"[MENU] üì• {user.full_name} ({user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –ø—Ä–∞–≤–∞'")

# –ü–û–õ–£–ß–ï–ù–ò–ï ID –ß–ê–¢–ê –ü–û –ö–û–ú–ê–ù–î–ï
async def show_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    await update.message.reply_text(f"chat_id: {chat.id}")
    await debug_log(context, f"[CHAT_ID] ‚ÑπÔ∏è {user.full_name} ({user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª chat_id: {chat.id}")

# –ü–û–õ–£–ß–ï–ù–ò–ï ID –¢–†–ï–î–ê –ü–û –ö–û–ú–ê–ù–î–ï
async def thread_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.channel_post
    if not message:
        await debug_log(context, "[THREAD_ID] ‚ö†Ô∏è –ù–µ—Ç message ‚Äî –Ω–∏ –æ–±—ã—á–Ω–æ–≥–æ, –Ω–∏ channel_post")
        return

    chat = message.chat
    user = message.from_user or message.sender_chat

    if not chat.is_forum:
        await message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ä—É–º. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–∞—Ö.")
        await debug_log(context, f"[THREAD_ID] ‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤–Ω–µ —Ñ–æ—Ä—É–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.full_name if hasattr(user, 'full_name') else user.title}")
        return

    if not message.message_thread_id:
        await message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞.")
        await debug_log(context, f"[THREAD_ID] ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤–Ω–µ —Ç–µ–º—ã. –ß–∞—Ç: {chat.id}")
        return

    await message.reply_text(f"üìå ID —ç—Ç–æ–π —Ç–µ–º—ã (message_thread_id): {message.message_thread_id}")
    await debug_log(context, f"[THREAD_ID] üìå –ó–∞–ø—Ä–æ—Å –æ—Ç {user.full_name if hasattr(user, 'full_name') else user.title}: {message.message_thread_id}")

# –ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(context, f"[BAN] üõ° –ö–æ–º–∞–Ω–¥–∞ /ban –≤—ã–∑–≤–∞–Ω–∞: {user.full_name if user else '‚Äî'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}")

    is_anonymous_admin = (
        user and user.is_bot and user.username == "GroupAnonymousBot"
        and sender_chat and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[BAN] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = (
            member.status in ("administrator", "creator")
            and getattr(member, "can_restrict_members", False)
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–∞–Ω.")
        await debug_log(context, "[BAN] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–∞–Ω —É –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ")
        return

    parts = message.text.strip().split()
    command = parts[0].lower()
    raw_args = parts[1:]
    target = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user

    elif raw_args:
        arg = raw_args[0]
        if arg.isdigit():
            try:
                member = await context.bot.get_chat_member(chat.id, int(arg))
                target = member.user
            except Exception as e:
                await message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {e}")
                await debug_log(context, f"[BAN] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ID: {repr(e)}")
                return
        elif arg.startswith("@"):
            try:
                username = arg[1:]  # —É–¥–∞–ª—è–µ–º "@"
                user_info = await context.bot.get_chat(username)
                member = await context.bot.get_chat_member(chat.id, user_info.id)
                target = member.user
            except Exception as e:
                await message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
                await debug_log(context, f"[BAN] ‚ùå –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ username: {repr(e)}")
                return
        else:
            await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[BAN] ‚ùå –¶–µ–ª—å –±–∞–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    target_member = await context.bot.get_chat_member(chat.id, target.id)
    if target_member.status in ("administrator", "creator"):
        await message.reply_text("üö´ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await debug_log(context, f"[BAN] üö´ –ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {target.full_name}")
        return

    try:
        await context.bot.ban_chat_member(chat.id, target.id)
        await debug_log(context, f"[BAN] ‚úÖ –ó–∞–±–∞–Ω–µ–Ω: {target.full_name} (ID: {target.id})")
        mention = target.mention_html()
        await message.reply_html(f"üö´ {mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å: {e}")
        await debug_log(context, f"[BAN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ {target.full_name}: {repr(e)}")

    if command.startswith("!ban"):
        try:
            await message.delete()
            await debug_log(context, "[BAN] üóë –ö–æ–º–∞–Ω–¥–∞ !ban —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass

# –†–ê–ó–ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(context, f"[UNBAN] üì• –ö–æ–º–∞–Ω–¥–∞ /unban –≤—ã–∑–≤–∞–Ω–∞: {user.full_name if user else sender_chat.title}")

    is_authorized = False
    if user and user.username == "GroupAnonymousBot" and sender_chat and sender_chat.id == chat.id:
        is_authorized = True
        await debug_log(context, "[UNBAN] ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω")
    elif user:
        try:
            member = await context.bot.get_chat_member(chat.id, user.id)
            is_authorized = (
                member.status in ("administrator", "creator")
                and getattr(member, "can_restrict_members", False)
            )
        except Exception as e:
            await debug_log(context, f"[UNBAN] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–±–∞–Ω.")
        await debug_log(context, "[UNBAN] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    parts = message.text.strip().split()
    raw_args = parts[1:] if len(parts) > 1 else []
    target_id = None
    target_name = None

    if message.reply_to_message and message.reply_to_message.from_user:
        target = message.reply_to_message.from_user
        target_id = target.id
        target_name = target.full_name
    elif raw_args:
        arg = raw_args[0]
        try:
            if arg.isdigit():
                target_id = int(arg)
                target = await context.bot.get_chat(target_id)
                target_name = target.full_name
            elif arg.startswith("@"):
                user_info = await context.bot.get_chat(arg)
                target_id = user_info.id
                target_name = user_info.full_name
            else:
                await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(context, f"[UNBAN] ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.")
        return

    if not target_id:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[UNBAN] ‚ùå –¶–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    try:
        result = await context.bot.unban_chat_member(chat.id, target_id, only_if_banned=True)
        mention = f"<a href='tg://user?id={target_id}'>{target_name or target_id}</a>"
        if result:
            await message.reply_html(f"‚úÖ {mention} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            await debug_log(context, f"[UNBAN] ‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω: {target_name or target_id}")
        else:
            await message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ.")
            await debug_log(context, f"[UNBAN] ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –±–∞–Ω–µ")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å: {e}")
        await debug_log(context, f"[UNBAN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ {target_id}: {e}")

# –ö–ò–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def kick_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(context, f"[KICK] üõ° /kick –≤—ã–∑–≤–∞–Ω: {user.full_name if user else 'None'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}")

    is_anonymous_admin = (
        user and user.is_bot and user.username == "GroupAnonymousBot"
        and sender_chat and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[KICK] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = (
            member.status in ("administrator", "creator")
            and getattr(member, "can_restrict_members", False)
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await debug_log(context, f"[KICK] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–∏–∫ —É {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        return

    parts = message.text.strip().split()
    command = parts[0].lower()
    raw_args = parts[1:]
    target = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user

    elif raw_args:
        arg = raw_args[0]
        try:
            if arg.isdigit():
                member = await context.bot.get_chat_member(chat.id, int(arg))
            elif arg.startswith("@"):
                member = await context.bot.get_chat_member(chat.id, arg)
            else:
                await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
                return
            target = member.user
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(context, f"[KICK] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ {arg}: {e}")
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[KICK] ‚ùå –¶–µ–ª—å –∫–∏–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    target_member = await context.bot.get_chat_member(chat.id, target.id)
    if target_member.status in ("administrator", "creator"):
        await message.reply_text("üö´ –ù–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await debug_log(context, f"[KICK] üö´ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {target.full_name}")
        return

    try:
        await context.bot.ban_chat_member(chat.id, target.id, until_date=0)
        await debug_log(context, f"[KICK] ‚úÖ –ò—Å–∫–ª—é—á—ë–Ω: {target.full_name} ({target.id})")
        mention = target.mention_html()
        await message.reply_html(f"üë¢ {mention} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å: {e}")
        await debug_log(context, f"[KICK] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ {target.id}: {e}")

    if command.startswith("!kick"):
        try:
            await message.delete()
            await debug_log(context, "[KICK] üóë –ö–æ–º–∞–Ω–¥–∞ !kick —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass

# –ú–£–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def mute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(context, f"[MUTE] üõ° /mute –≤—ã–∑–≤–∞–Ω: {user.full_name if user else 'None'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}")

    is_anonymous_admin = (
        user and user.is_bot and user.username == "GroupAnonymousBot"
        and sender_chat and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[MUTE] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = (
            member.status in ("administrator", "creator")
            and getattr(member, "can_restrict_members", False)
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–µ–∑–∑–≤—É—á–∏–≤–∞–Ω–∏–µ.")
        await debug_log(context, f"[MUTE] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ /mute —É {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        return

    parts = message.text.strip().split()
    if not parts:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /mute @user 10min")
        return

    command = parts[0].lower()
    raw_args = parts[1:]
    target = None
    duration = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user
        if raw_args:
            duration = raw_args[0]
        else:
            await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä: /mute 5min")
            return

    elif len(raw_args) >= 2:
        target_str, duration = raw_args[0], raw_args[1]
        try:
            if target_str.isdigit():
                member = await context.bot.get_chat_member(chat.id, int(target_str))
            elif target_str.startswith("@"):
                member = await context.bot.get_chat_member(chat.id, target_str)
            else:
                await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ @username).")
                return
            target = member.user
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(context, f"[MUTE] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ {target_str}: {e}")
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä: /mute @user 10min –∏–ª–∏ /mute 5min –≤ –æ—Ç–≤–µ—Ç")
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[MUTE] ‚ùå –¶–µ–ª—å –º—É—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    target_member = await context.bot.get_chat_member(chat.id, target.id)
    if target_member.status in ("administrator", "creator"):
        await message.reply_text("üö´ –ù–µ–ª—å–∑—è –æ–±–µ–∑–∑–≤—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await debug_log(context, f"[MUTE] üö´ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–µ–∑–∑–≤—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {target.full_name}")
        return

    until_date = None
    msk_display = "–Ω–∞–≤—Å–µ–≥–¥–∞"

    if duration:
        duration = duration.replace(" ", "")
        time_match = re.match(r"(\d+)([a-zA-Z–∞-—è–ê-–Ø]+)", duration)
        if not time_match:
            await message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä—ã: 10min, 2h, 3d, 1mon, 1y\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã:\n"
                "- –º–∏–Ω: min, m, –º–∏–Ω\n"
                "- —á–∞—Å—ã: h, —á\n"
                "- –¥–Ω–∏: d, –¥, day\n"
                "- –º–µ—Å—è—Ü—ã: mon, mo, –º–µ—Å\n"
                "- –≥–æ–¥—ã: y, yr, –≥"
            )
            await debug_log(context, f"[MUTE] ‚ùå –ù–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∞—Å—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
            return

        value, unit = time_match.groups()
        try:
            value = int(value)
        except:
            await message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        unit = unit.lower()
        now = datetime.utcnow()

        if unit in ("min", "m", "–º–∏–Ω"):
            until_date = now + timedelta(minutes=value)
        elif unit in ("h", "—á"):
            until_date = now + timedelta(hours=value)
        elif unit in ("d", "–¥", "day"):
            until_date = now + timedelta(days=value)
        elif unit in ("mon", "mo", "–º–µ—Å"):
            until_date = now + timedelta(days=30 * value)
        elif unit in ("y", "yr", "–≥"):
            until_date = now + timedelta(days=365 * value)
        else:
            await message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 10min, 2h, 3d, 1mon, 1y\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã:\n"
                "- –º–∏–Ω: min, m, –º–∏–Ω\n"
                "- —á–∞—Å—ã: h, —á\n"
                "- –¥–Ω–∏: d, –¥, day\n"
                "- –º–µ—Å—è—Ü—ã: mon, mo, –º–µ—Å\n"
                "- –≥–æ–¥—ã: y, yr, –≥"
            )
            await debug_log(context, f"[MUTE] ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —é–Ω–∏—Ç: {unit}")
            return

        msk_display = (until_date + timedelta(hours=3)).strftime("%Y-%m-%d %H:%M")

    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=target.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await debug_log(context, f"[MUTE] ‚úÖ –û–±–µ–∑–∑–≤—É—á–µ–Ω: {target.full_name} –¥–æ {until_date}")
        await message.reply_text(
            f"üîá {target.full_name} –æ–±–µ–∑–∑–≤—É—á–µ–Ω –¥–æ {msk_display} –ø–æ –ú–°–ö."
        )
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ–∑–∑–≤—É—á–∏—Ç—å: {e}")
        await debug_log(context, f"[MUTE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–µ–∑–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ {target.id}: {e}")

    if command.startswith("!mute"):
        try:
            await message.delete()
            await debug_log(context, "[MUTE] üóë –ö–æ–º–∞–Ω–¥–∞ !mute —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass

# –†–ê–ó–ú–£–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def unmute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(context, f"[UNMUTE] üõ° /unmute –≤—ã–∑–≤–∞–Ω: {user.full_name if user else 'None'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}")

    is_anonymous_admin = (
        user and user.is_bot and user.username == "GroupAnonymousBot"
        and sender_chat and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[UNMUTE] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = (
            member.status in ("administrator", "creator")
            and getattr(member, "can_restrict_members", False)
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–º—É—Ç.")
        await debug_log(context, f"[UNMUTE] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ /unmute —É {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        return

    parts = message.text.strip().split()
    command = parts[0].lower()
    raw_args = parts[1:]
    target = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user

    elif raw_args:
        arg = raw_args[0]
        try:
            if arg.isdigit():
                member = await context.bot.get_chat_member(chat.id, int(arg))
            elif arg.startswith("@"):
                member = await context.bot.get_chat_member(chat.id, arg)
            else:
                await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
                return
            target = member.user
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(context, f"[UNMUTE] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ {arg}: {e}")
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[UNMUTE] ‚ùå –¶–µ–ª—å —Ä–∞–∑–º—É—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=target.id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        await debug_log(context, f"[UNMUTE] ‚úÖ –†–∞–∑–º—É—á–µ–Ω: {target.full_name} ({target.id})")
        mention = target.mention_html()
        await message.reply_html(f"üîä {mention} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å: {e}")
        await debug_log(context, f"[UNMUTE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ {target.id}: {e}")

    if command.startswith("!unmute"):
        try:
            await message.delete()
            await debug_log(context, "[UNMUTE] üóë –ö–æ–º–∞–Ω–¥–∞ !unmute —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass

# –ü–†–ê–í–ò–õ–ê –ß–ê–¢–ê - –í–´–í–ï–°–¢–ò
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules = context.bot_data.get("rules", {})
    user = update.effective_user

    await debug_log(context, f"[RULES] üì• /rules –≤—ã–∑–≤–∞–ª: {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}")

    if not rules:
        await update.message.reply_text("üì≠ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        await debug_log(context, "[RULES] ‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ context.bot_data")
        return

    text = rules.get("text", "üìÉ –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:")
    photo_id = rules.get("photo_file_id")

    if photo_id:
        await debug_log(context, f"[RULES] üñº –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å caption: {text}")
        await update.message.reply_photo(photo=photo_id, caption=text)
    else:
        await debug_log(context, f"[RULES] üìú –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª: {text}")
        await update.message.reply_text(text)

# –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ê–í–ò–õ –ß–ê–¢–ê
async def set_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    # üí• –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã
    if message.media_group_id:
        await debug_log(context, f"[SET_RULES] ‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–ª—å–±–æ–º–∞ (media_group_id={message.media_group_id})")
        return

    # ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è /set_rules (–≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏)
    text_to_check = message.text or message.caption
    if not text_to_check or not text_to_check.strip().startswith("/set_rules"):
        return

    await debug_log(
        context,
        f"[SET_RULES] üõ° /set_rules –≤—ã–∑–≤–∞–ª: {user.full_name if user else 'None'} | sender_chat={sender_chat.title if sender_chat else '‚Äî'}, chat_id={chat.id}"
    )

    is_authorized = False

    is_anonymous_admin = (
        user and user.is_bot and user.username == "GroupAnonymousBot"
        and sender_chat and sender_chat.id == chat.id
    )

    if is_anonymous_admin:
        await debug_log(context, "[SET_RULES] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = (
            member.status in ("administrator", "creator")
            and getattr(member, "can_change_info", False)
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        await debug_log(context, f"[SET_RULES] ‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ ‚Äî –Ω–µ—Ç –ø—Ä–∞–≤ —É {user.full_name if user else '‚Äî'}")
        return

    text = message.caption if message.caption else message.text
    photo = message.photo[-1].file_id if message.photo else None

    if not text and not photo:
        await message.reply_text("‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –∏ —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ.")
        await debug_log(context, "[SET_RULES] ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Äî –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–æ—Ç–æ")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /set_rules –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if text:
        text = text.replace("/set_rules", "").strip()

    context.bot_data["rules"] = {
        "text": text,
        "photo_file_id": photo
    }

    await debug_log(context, f"[SET_RULES] ‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–∫—Å—Ç: {text[:60]}{'...' if len(text) > 60 else ''}, –§–æ—Ç–æ: {'–µ—Å—Ç—å' if photo else '–Ω–µ—Ç'}")
    await message.delete()
    await context.bot.send_message(chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")



# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ê–í–¢–û–§–ò–õ–¨–¢–†–´ –ë–û–¢–ê ---------------------------------------------------------

# –ü–†–û–í–ï–†–ö–ê –ù–ò–ö–ê –ù–ê –ê–†–ê–ë–°–ö–ò–ï –°–ò–ú–í–û–õ–´ –ü–†–ò –í–•–û–î–ï
ARABIC_REGEX = re.compile(r'[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]')

async def check_arabic_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    if not user:
        await debug_log(context, "[ARABIC] ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ update ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    full_name = f"{user.first_name or ''} {user.last_name or ''}"
    await debug_log(context, f"[ARABIC] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–∞ –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–π: user_id={user.id}, full_name='{full_name}'")

    if ARABIC_REGEX.search(full_name):
        await debug_log(context, f"[ARABIC] ‚ùå –ù–∞–π–¥–µ–Ω—ã –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏: user_id={user.id}")

        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=False)
            )
            await debug_log(context, f"[ARABIC] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –∑–∞ –∞—Ä–∞–±—Å–∫–∏–π –Ω–∏–∫: user_id={user.id}")

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∫", callback_data=f"check_nick:{user.id}")]
            ])

            await update.message.reply_text(
                "‚ùå –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
                "–ü–æ–º–µ–Ω—è–π—Ç–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=keyboard
            )

        except Exception as e:
            await debug_log(context, f"[ARABIC] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")

# –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò –ù–ò–ö–ê –ù–ê –ê–†–ê–ë–°–ö–ò–ï –°–ò–ú–í–û–õ–´
async def handle_check_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat = query.message.chat

    full_name = f"{user.first_name or ''} {user.last_name or ''}"
    await debug_log(context, f"[ARABIC_BTN] üîç –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–∞: user_id={user.id}, full_name='{full_name}'")

    if ARABIC_REGEX.search(full_name):
        await debug_log(context, f"[ARABIC_BTN] ‚ùå –ê—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤—Å—ë –µ—â—ë –≤ –∏–º–µ–Ω–∏: user_id={user.id}")

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_nick:{user.id}")]
        ])

        await query.edit_message_text(
            "‚ùå –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –≤—Å—ë –µ—â—ë —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–º–µ–Ω—è–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard
        )
    else:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await query.edit_message_text("‚úÖ –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –∏–∑–º–µ–Ω—ë–Ω–æ. –ú—É—Ç —Å–Ω—è—Ç.")
            await debug_log(context, f"[ARABIC_BTN] ‚úÖ –ê—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã —É–¥–∞–ª–µ–Ω—ã ‚Äî –º—É—Ç —Å–Ω—è—Ç: user_id={user.id}")
        except Exception as e:
            await debug_log(context, f"[ARABIC_BTN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")


# –ü–†–û–í–ï–†–ö–ê –ù–ò–ö–ê –ù–ê –ü–£–°–¢–û–ô
INVALID_NAME_REGEX = re.compile(r'^[\s.]+$')

async def check_empty_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user
    chat = update.effective_chat

    if not message or not user:
        return

    name = f"{user.first_name or ''}{user.last_name or ''}".strip()
    await debug_log(context, f"[EMPTY_NAME] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏: user_id={user.id}, name='{name}'")

    if not name or INVALID_NAME_REGEX.match(name):
        await debug_log(context, f"[EMPTY_NAME] ‚ùå –ò–º—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: user_id={user.id}, name='{name}'")
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=False)
            )
            await debug_log(context, f"[EMPTY_NAME] üîá –ó–∞–º—É—á–µ–Ω –∑–∞ –ø—É—Å—Ç–æ–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: user_id={user.id}")

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º—è (–Ω–∏–∫–Ω–µ–π–º)", callback_data=f"check_name:{user.id}")]
            ])

            await message.reply_text(
                "‚ùå –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤/—Ç–æ—á–µ–∫. –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=keyboard
            )
        except Exception as e:
            await debug_log(context, f"[EMPTY_NAME] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")


# –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò –ù–ò–ö–ê –ù–ê –°–ü–ï–¶ –°–ò–ú–í–û–õ–´ –ò –ü–£–°–¢–û–¢–£
async def handle_check_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat = query.message.chat
    name = f"{user.first_name or ''}{user.last_name or ''}".strip()

    await debug_log(context, f"[NAME_BTN] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–æ–π –∏–º–µ–Ω–∏: user_id={user.id}, name='{name}'")

    if not name or INVALID_NAME_REGEX.match(name):
        await debug_log(context, f"[NAME_BTN] ‚ùå –ò–º—è –≤—Å—ë –µ—â—ë –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: user_id={user.id}")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_name:{user.id}")]
        ])
        await query.edit_message_text(
            "‚ùå –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –≤—Å—ë –µ—â—ë –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è.",
            reply_markup=keyboard
        )
    else:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await query.edit_message_text("‚úÖ –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –ø—Ä–∏–Ω—è—Ç–æ. –ú—É—Ç —Å–Ω—è—Ç.")
            await debug_log(context, f"[NAME_BTN] ‚úÖ –ú—É—Ç —Å–Ω—è—Ç: user_id={user.id}, name='{name}'")
        except Exception as e:
            await debug_log(context, f"[NAME_BTN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")

# –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–û–ô –Æ–ó–ï–†–ù–ï–ô–ú
async def check_empty_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user
    chat = update.effective_chat

    if not message or not user:
        return

    await debug_log(context, f"[USERNAME_EMPTY] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ username: user_id={user.id}, username={user.username}")

    if not user.username:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=False)
            )
            await debug_log(context, f"[USERNAME_EMPTY] üîá –ú—É—Ç –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ username: user_id={user.id}")

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å username", callback_data=f"check_username:{user.id}")]
            ])

            await message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=keyboard
            )
        except Exception as e:
            await debug_log(context, f"[USERNAME_EMPTY] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")

# –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò –ù–ê –ü–£–°–¢–û–ô –Æ–ó–ï–†–ù–ï–ô–ú
async def handle_check_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat = query.message.chat

    await debug_log(context, f"[USERNAME_BTN] üîç –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username: user_id={user.id}, username={user.username}")

    if not user.username:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_username:{user.id}")]
        ])
        await query.edit_message_text(
            "‚ùå Username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≤—Å—ë –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard
        )
        await debug_log(context, f"[USERNAME_BTN] ‚ùå Username –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: user_id={user.id}")
    else:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await query.edit_message_text("‚úÖ Username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–∞–π–¥–µ–Ω–æ. –ú—É—Ç —Å–Ω—è—Ç.")
            await debug_log(context, f"[USERNAME_BTN] ‚úÖ Username —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –º—É—Ç —Å–Ω—è—Ç: user_id={user.id}")
        except Exception as e:
            await debug_log(context, f"[USERNAME_BTN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")

# –ê–ù–¢–ò–°–ü–ê–ú
async def check_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user
    chat = update.effective_chat

    if not message or not user or not message.text:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.strip().startswith("/"):
        await debug_log(context, f"[SPAM_CHECK] ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {user.id}: {message.text!r}")
        return

    await debug_log(context, f"[SPAM_CHECK] üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {message.text!r}")

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∞–º-—Ç—Ä–µ–∫–∏–Ω–≥–∞
    user_data = context.chat_data.setdefault("spam_tracker", {})
    entry = user_data.get(user.id, {"text": "", "count": 0})

    if message.text == entry["text"]:
        entry["count"] += 1
        await debug_log(context, f"[SPAM_CHECK] üîÅ –ü–æ–≤—Ç–æ—Ä #{entry['count']} –æ—Ç {user.id}")
    else:
        entry["text"] = message.text
        entry["count"] = 1
        await debug_log(context, f"[SPAM_CHECK] ‚úèÔ∏è –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {user.id}, —Å—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω")

    user_data[user.id] = entry

    if entry["count"] >= 3:
        try:
            until_date = update.message.date + timedelta(hours=1)
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until_date
            )
            await message.reply_text(
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 —á–∞—Å –∑–∞ —Å–ø–∞–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
            )
            entry["count"] = 0
            await debug_log(context, f"[SPAM_CHECK] üîá {user.full_name} ({user.id}) –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 —á–∞—Å –∑–∞ —Å–ø–∞–º")
        except Exception as e:
            await debug_log(context, f"[SPAM_CHECK] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –∑–∞ —Å–ø–∞–º: {e}")

# –ö–ê–ü–ß–ê –ü–†–ò –í–•–û–î–ï - –í–´–í–û–î
CAPTCHA_EMOJIS = ["ü´ñ", "‚òïÔ∏è", "üßã", "üçµ", "üç∫", "üßÉ", "ü•§", "ü•É"]

async def on_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for user in update.message.new_chat_members:
        if user.is_bot:
            continue

        chat_id = update.effective_chat.id
        await debug_log(context, f"[CAPTCHA_JOIN] üÜï –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.full_name} (ID: {user.id})")

        # –ú—É—Ç–∏–º –ø—Ä–∏ –≤—Ö–æ–¥–µ
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=False)
            )
            await debug_log(context, f"[CAPTCHA_JOIN] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–º—É—á–µ–Ω –¥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏")
        except Exception as e:
            await debug_log(context, f"[CAPTCHA_JOIN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ø—á—É
        correct = random.choice(CAPTCHA_EMOJIS)
        fake = random.sample([e for e in CAPTCHA_EMOJIS if e != correct], 3)
        options = fake + [correct]
        random.shuffle(options)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(e, callback_data=f"captcha:{user.id}:{e}:{correct}")]
            for e in options
        ])

        try:
            msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n–î–∞–≤–∞–π —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç!\n–ù–∞–∂–º–∏ –Ω–∞ —ç–º–æ–¥–∑–∏: {correct}",
                reply_markup=keyboard
            )
            await debug_log(context, f"[CAPTCHA_JOIN] üì© –ö–∞–ø—á–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.message_id}")
            context.chat_data[user.id] = {"captcha_msg_id": msg.message_id}
        except Exception as e:
            await debug_log(context, f"[CAPTCHA_JOIN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏: {e}")

        try:
            context.job_queue.run_once(
                kick_if_no_captcha,
                when=300,
                data={"chat_id": chat_id, "user_id": user.id},
                name=str(user.id)
            )
            await debug_log(context, f"[CAPTCHA_JOIN] ‚è± –¢–∞–π–º–µ—Ä –∫–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id={user.id}")
        except Exception as e:
            await debug_log(context, f"[CAPTCHA_JOIN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∏–∫–∞: {e}")


# –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ö–ê–ü–ß–ò
async def handle_captcha_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat_id = query.message.chat.id
    parts = query.data.split(":")
    uid, pressed, correct = int(parts[1]), parts[2], parts[3]

    await debug_log(context, f"[CAPTCHA_PRESS] üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏: user_id={user.id}, –Ω–∞–∂–∞–ª={pressed}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π={correct}")

    if user.id != uid:
        await query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–∞–ø—á–∞", show_alert=True)
        await debug_log(context, f"[CAPTCHA_PRESS] ‚õî –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å —á—É–∂—É—é –∫–∞–ø—á—É: {user.id} != {uid}")
        return

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–∏–∫
    for j in context.job_queue.get_jobs_by_name(str(user.id)):
        j.schedule_removal()
    await debug_log(context, f"[CAPTCHA_PRESS] ‚èπ –¢–∞–π–º–µ—Ä –∫–∏–∫–∞ —Å–Ω—è—Ç: user_id={user.id}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
    try:
        msg_id = context.chat_data.get(user.id, {}).get("captcha_msg_id")
        if msg_id:
            await context.bot.delete_message(chat_id, msg_id)
            await debug_log(context, f"[CAPTCHA_PRESS] üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏: msg_id={msg_id}")
    except Exception as e:
        await debug_log(context, f"[CAPTCHA_PRESS] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–ø—á–∏: {e}")

    if pressed == correct:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user.id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await context.bot.send_message(chat_id, f"‚úÖ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            await debug_log(context, f"[CAPTCHA_PRESS] üîì –†–∞–∑–º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
        except Exception as e:
            await debug_log(context, f"[CAPTCHA_PRESS] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")
    else:
        try:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
            await context.bot.ban_chat_member(chat_id, user.id)
            await debug_log(context, f"[CAPTCHA_PRESS] üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∫–∏–∫–Ω—É—Ç –∑–∞ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–∞–ø—á—É")
        except Exception as e:
            await debug_log(context, f"[CAPTCHA_PRESS] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")

# –ö–ê–ü–ß–ê - –ê–í–¢–û–ö–ò–ö –ü–û –¢–ê–ô–ú–ï–†–£
async def kick_if_no_captcha(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    chat_id = data["chat_id"]
    user_id = data["user_id"]

    await debug_log(context, f"[CAPTCHA_TIMEOUT] ‚è∞ –¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫ ‚Äî –∫–∏–∫: user_id={user_id}")
    try:
        await context.bot.ban_chat_member(chat_id, user_id)
        await context.bot.unban_chat_member(chat_id, user_id)
        await debug_log(context, f"[CAPTCHA_TIMEOUT] üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∫–∏–∫–Ω—É—Ç –ø–æ —Ç–∞–π–º–µ—Ä—É –∫–∞–ø—á–∏")
    except Exception as e:
        await debug_log(context, f"[CAPTCHA_TIMEOUT] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∫–∏–∫–µ user_id={user_id}: {e}")


# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ê–í–¢–û–°–û–û–ë–©–ï–ù–ò–Ø –ë–û–¢–ê ---------------------------------------------------------
# –ê–í–¢–û–°–û–û–ë–©–ï–ù–ò–ï –ü–†–û –†–ê–ó–ú–£–¢, –†–ê–ó–ë–ê–ù –ò –¢–î
async def chat_member_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    old = update.chat_member.old_chat_member
    new = update.chat_member.new_chat_member
    chat = update.effective_chat
    user = new.user

    await debug_log(
        context,
        f"[AUTOMSG] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ —É {user.full_name} ({user.id}): {old.status} ‚Üí {new.status}"
    )

    # ‚úÖ –†–∞–∑–±–∞–Ω
    if old.status == "kicked" and new.status == "member":
        await context.bot.send_message(
            chat.id,
            f"‚úÖ {user.mention_html()} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.",
            parse_mode="HTML"
        )
        await debug_log(context, f"[AUTOMSG] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Ä–∞–∑–±–∞–Ω: {user.full_name} ({user.id})")

    # ‚úÖ –†–∞–∑–º—É—Ç
    if old.can_send_messages is False and new.can_send_messages is True:
        await context.bot.send_message(
            chat.id,
            f"üîä {user.mention_html()} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.",
            parse_mode="HTML"
        )
        await debug_log(context, f"[AUTOMSG] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Ä–∞–∑–º—É—Ç: {user.full_name} ({user.id})")

# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –•–ï–ù–î–õ–ï–†–´ –ë–û–¢–ê ---------------------------------------------------------

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    job_queue = app.job_queue

    # 0‚Äì3 ‚Äî —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, check_arabic_name), group=0)
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, check_spam), group=1)
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, check_empty_name), group=2)
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, check_empty_username), group=3)

    # 4 ‚Äî –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, on_new_member), group=4)

    # 5 ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∞–≤–∏–ª
    app.add_handler(CommandHandler("rules", show_rules), group=5)
    

    # 6 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–ø–∏—Å—å —Å —Ñ–æ—Ç–æ)
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, set_rules), group=6)

    # 7 ‚Äî –∞–¥–º–∏–Ω-–º–æ–¥–µ—Ä–∞—Ü–∏—è
    app.add_handler(CommandHandler("ban", ban_user), group=7)
    app.add_handler(MessageHandler(filters.Regex(r"^!?unban"), unban_user), group=7)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^!ban"), ban_user), group=7)
    app.add_handler(CommandHandler("mute", mute_user), group=7)
    app.add_handler(MessageHandler(filters.Regex(r"^!?unmute"), unmute_user), group=7)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^!mute"), mute_user), group=7)
    app.add_handler(MessageHandler(filters.Regex(r"^!?kick"), kick_user), group=7)

    # 8 ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
    app.add_handler(MessageHandler(filters.UpdateType.CHANNEL_POST, forward_by_hashtag), group=8)

    # 9 ‚Äî –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ —Ä–∞–∑–º—É—Ç
    app.add_handler(ChatMemberHandler(chat_member_update, ChatMemberHandler.CHAT_MEMBER), group=9)
    app.add_handler(ChatMemberHandler(chat_member_update, ChatMemberHandler.MY_CHAT_MEMBER), group=9)

    app.add_handler(CommandHandler("thread_id", thread_id_command), group=99)
    app.add_handler(CommandHandler("chat_id", show_chat_id), group=99)
    app.add_handler(CallbackQueryHandler(handle_check_nick, pattern=r'^check_nick:'))
    app.add_handler(CallbackQueryHandler(handle_check_name, pattern=r'^check_name:'))
    app.add_handler(CallbackQueryHandler(handle_check_username, pattern=r'^check_username:'))
    app.add_handler(CallbackQueryHandler(handle_captcha_press, pattern=r"^captcha:"))
    app.post_init = set_bot_commands
    debug_log_sync("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–µ–º...")
    app.run_polling()
