from telegram import Update
from telegram.ext import ContextTypes

from utils.logger import debug_log


# –ü–†–ê–í–ò–õ–ê –ß–ê–¢–ê - –í–´–í–ï–°–¢–ò
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules = context.bot_data.get("rules", {})
    user = update.effective_user

    await debug_log(
        context,
        f"[RULES] üì• /rules –≤—ã–∑–≤–∞–ª: {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}",
    )

    if not rules:
        await update.message.reply_text("üì≠ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        await debug_log(context, "[RULES] ‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ context.bot_data")
        return

    text = rules.get("text", "üìÉ –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:")
    photo_id = rules.get("photo_file_id")

    if photo_id:
        await debug_log(context, f"[RULES] üñº –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å caption: {text}")
        await update.message.reply_photo(photo=photo_id, caption=text)
    else:
        await debug_log(context, f"[RULES] üìú –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª: {text}")
        await update.message.reply_text(text)


# –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ê–í–ò–õ –ß–ê–¢–ê
async def set_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        await debug_log(context, "[SET_RULES] ‚ùå –ù–µ—Ç message –≤ update")
        return

    chat = update.effective_chat
    user = update.effective_user or None
    sender_chat = message.sender_chat or None

    # üí• –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã
    if message.media_group_id:
        await debug_log(
            context,
            f"[SET_RULES] ‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–ª—å–±–æ–º–∞ (media_group_id={message.media_group_id})",
        )
        return

    # ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è /set_rules (–≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏)
    text_to_check = message.text or message.caption
    if not text_to_check or not text_to_check.strip().startswith("/set_rules"):
        return

    await debug_log(
        context,
        f"[SET_RULES] üõ° /set_rules –≤—ã–∑–≤–∞–ª: {user.full_name if user else 'None'} | "
        f"sender_chat={sender_chat.title if sender_chat else '‚Äî'}, chat_id={chat.id}",
    )

    is_authorized = False

    is_anonymous_admin = (
        user
        and user.is_bot
        and user.username == "GroupAnonymousBot"
        and sender_chat
        and sender_chat.id == chat.id
    )

    if is_anonymous_admin:
        await debug_log(
            context, "[SET_RULES] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ"
        )
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = member.status in ("administrator", "creator") and getattr(
            member, "can_change_info", False
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        await debug_log(
            context,
            f"[SET_RULES] ‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ ‚Äî –Ω–µ—Ç –ø—Ä–∞–≤ —É {user.full_name if user else '‚Äî'}",
        )
        return

    text = message.caption if message.caption else message.text
    photo = message.photo[-1].file_id if message.photo else None

    if not text and not photo:
        await message.reply_text("‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –∏ —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ.")
        await debug_log(
            context, "[SET_RULES] ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Äî –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–æ—Ç–æ"
        )
        return

    if text:
        text = text.replace("/set_rules", "").strip()

    context.bot_data["rules"] = {"text": text, "photo_file_id": photo}

    await debug_log(
        context,
        f"[SET_RULES] ‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–∫—Å—Ç: {text[:60]}{'...' if len(text) > 60 else ''}, –§–æ—Ç–æ: {'–µ—Å—Ç—å' if photo else '–Ω–µ—Ç'}",
    )
    await message.delete()
    await context.bot.send_message(chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
