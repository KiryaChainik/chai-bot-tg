import re

from telegram import Update
from telegram.ext import ContextTypes

from utils.logger import debug_log

# ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ê–í–¢–û–§–ò–õ–¨–¢–†–´ –ë–û–¢–ê ---------------------------------------------------------

# –ü–†–û–í–ï–†–ö–ê –ù–ò–ö–ê –ù–ê –ê–†–ê–ë–°–ö–ò–ï –°–ò–ú–í–û–õ–´ –ü–†–ò –í–•–û–î–ï
ARABIC_REGEX = re.compile(
    r"[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]"
)


async def check_arabic_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    if not user:
        await debug_log(
            context,
            "[ARABIC] ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ update ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        )
        return

    full_name = f"{user.first_name or ''} {user.last_name or ''}"
    await debug_log(
        context,
        f"[ARABIC] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–∞ –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–π: user_id={user.id}, full_name='{full_name}'",
    )

    if ARABIC_REGEX.search(full_name):
        await debug_log(
            context, f"[ARABIC] ‚ùå –ù–∞–π–¥–µ–Ω—ã –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏: user_id={user.id}"
        )

        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=False),
            )
            await debug_log(
                context,
                f"[ARABIC] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –∑–∞ –∞—Ä–∞–±—Å–∫–∏–π –Ω–∏–∫: user_id={user.id}",
            )

            keyboard = telegram.InlineKeyboardMarkup(
                [
                    [
                        telegram.InlineKeyboardButton(
                            "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∫", callback_data=f"check_nick:{user.id}"
                        )
                    ]
                ]
            )

            await update.message.reply_text(
                "‚ùå –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
                "–ü–æ–º–µ–Ω—è–π—Ç–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=keyboard,
            )

        except Exception as e:
            await debug_log(context, f"[ARABIC] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")


# –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò –ù–ò–ö–ê –ù–ê –ê–†–ê–ë–°–ö–ò–ï –°–ò–ú–í–û–õ–´
async def handle_check_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat = query.message.chat

    full_name = f"{user.first_name or ''} {user.last_name or ''}"
    await debug_log(
        context,
        f"[ARABIC_BTN] üîç –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–∞: user_id={user.id}, full_name='{full_name}'",
    )

    if ARABIC_REGEX.search(full_name):
        await debug_log(
            context,
            f"[ARABIC_BTN] ‚ùå –ê—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤—Å—ë –µ—â—ë –≤ –∏–º–µ–Ω–∏: user_id={user.id}",
        )

        keyboard = telegram.InlineKeyboardMarkup(
            [
                [
                    telegram.InlineKeyboardButton(
                        "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_nick:{user.id}"
                    )
                ]
            ]
        )

        await query.edit_message_text(
            "‚ùå –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –≤—Å—ë –µ—â—ë —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–º–µ–Ω—è–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard,
        )
    else:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=True),
            )
            await query.edit_message_text("‚úÖ –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –∏–∑–º–µ–Ω—ë–Ω–æ. –ú—É—Ç —Å–Ω—è—Ç.")
            await debug_log(
                context,
                f"[ARABIC_BTN] ‚úÖ –ê—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã —É–¥–∞–ª–µ–Ω—ã ‚Äî –º—É—Ç —Å–Ω—è—Ç: user_id={user.id}",
            )
        except Exception as e:
            await debug_log(context, f"[ARABIC_BTN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")


# –ü–†–û–í–ï–†–ö–ê –ù–ò–ö–ê –ù–ê –ü–£–°–¢–û–ô
INVALID_NAME_REGEX = re.compile(r"^[\s.]+$")


async def check_empty_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user
    chat = update.effective_chat

    if not message or not user:
        return

    name = f"{user.first_name or ''}{user.last_name or ''}".strip()
    await debug_log(
        context, f"[EMPTY_NAME] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏: user_id={user.id}, name='{name}'"
    )

    if not name or INVALID_NAME_REGEX.match(name):
        await debug_log(
            context, f"[EMPTY_NAME] ‚ùå –ò–º—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: user_id={user.id}, name='{name}'"
        )
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=False),
            )
            await debug_log(
                context,
                f"[EMPTY_NAME] üîá –ó–∞–º—É—á–µ–Ω –∑–∞ –ø—É—Å—Ç–æ–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: user_id={user.id}",
            )

            keyboard = telegram.InlineKeyboardMarkup(
                [
                    [
                        telegram.InlineKeyboardButton(
                            "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º—è (–Ω–∏–∫–Ω–µ–π–º)",
                            callback_data=f"check_name:{user.id}",
                        )
                    ]
                ]
            )

            await message.reply_text(
                "‚ùå –í–∞—à–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤/—Ç–æ—á–µ–∫. –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è (–Ω–∏–∫–Ω–µ–π–º) –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=keyboard,
            )
        except Exception as e:
            await debug_log(context, f"[EMPTY_NAME] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")


# –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò –ù–ò–ö–ê –ù–ê –°–ü–ï–¶ –°–ò–ú–í–û–õ–´ –ò –ü–£–°–¢–û–¢–£
async def handle_check_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat = query.message.chat
    name = f"{user.first_name or ''}{user.last_name or ''}".strip()

    await debug_log(
        context,
        f"[NAME_BTN] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–æ–π –∏–º–µ–Ω–∏: user_id={user.id}, name='{name}'",
    )

    if not name or INVALID_NAME_REGEX.match(name):
        await debug_log(
            context, f"[NAME_BTN] ‚ùå –ò–º—è –≤—Å—ë –µ—â—ë –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: user_id={user.id}"
        )
        keyboard = telegram.InlineKeyboardMarkup(
            [
                [
                    telegram.InlineKeyboardButton(
                        "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_name:{user.id}"
                    )
                ]
            ]
        )
        await query.edit_message_text(
            "‚ùå –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –≤—Å—ë –µ—â—ë –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è.",
            reply_markup=keyboard,
        )
    else:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=True),
            )
            await query.edit_message_text("‚úÖ –ò–º—è (–Ω–∏–∫–Ω–µ–π–º) –ø—Ä–∏–Ω—è—Ç–æ. –ú—É—Ç —Å–Ω—è—Ç.")
            await debug_log(
                context, f"[NAME_BTN] ‚úÖ –ú—É—Ç —Å–Ω—è—Ç: user_id={user.id}, name='{name}'"
            )
        except Exception as e:
            await debug_log(context, f"[NAME_BTN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")


# –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–û–ô –Æ–ó–ï–†–ù–ï–ô–ú
async def check_empty_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user
    chat = update.effective_chat

    if not message or not user:
        return

    await debug_log(
        context,
        f"[USERNAME_EMPTY] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ username: user_id={user.id}, username={user.username}",
    )

    if not user.username:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=False),
            )
            await debug_log(
                context,
                f"[USERNAME_EMPTY] üîá –ú—É—Ç –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ username: user_id={user.id}",
            )

            keyboard = telegram.InlineKeyboardMarkup(
                [
                    [
                        telegram.InlineKeyboardButton(
                            "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å username",
                            callback_data=f"check_username:{user.id}",
                        )
                    ]
                ]
            )

            await message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
                reply_markup=keyboard,
            )
        except Exception as e:
            await debug_log(context, f"[USERNAME_EMPTY] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")


# –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò –ù–ê –ü–£–°–¢–û–ô –Æ–ó–ï–†–ù–ï–ô–ú
async def handle_check_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat = query.message.chat

    await debug_log(
        context,
        f"[USERNAME_BTN] üîç –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username: user_id={user.id}, username={user.username}",
    )

    if not user.username:
        keyboard = telegram.InlineKeyboardMarkup(
            [
                [
                    telegram.InlineKeyboardButton(
                        "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_username:{user.id}"
                    )
                ]
            ]
        )
        await query.edit_message_text(
            "‚ùå Username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≤—Å—ë –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard,
        )
        await debug_log(
            context,
            f"[USERNAME_BTN] ‚ùå Username –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: user_id={user.id}",
        )
    else:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=True),
            )
            await query.edit_message_text(
                "‚úÖ Username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–∞–π–¥–µ–Ω–æ. –ú—É—Ç —Å–Ω—è—Ç."
            )
            await debug_log(
                context,
                f"[USERNAME_BTN] ‚úÖ Username —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –º—É—Ç —Å–Ω—è—Ç: user_id={user.id}",
            )
        except Exception as e:
            await debug_log(context, f"[USERNAME_BTN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")


# –ê–ù–¢–ò–°–ü–ê–ú
async def check_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = update.effective_user
    chat = update.effective_chat

    if not message or not user or not message.text:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.strip().startswith("/"):
        await debug_log(
            context,
            f"[SPAM_CHECK] ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {user.id}: {message.text!r}",
        )
        return

    await debug_log(
        context, f"[SPAM_CHECK] üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {message.text!r}"
    )

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∞–º-—Ç—Ä–µ–∫–∏–Ω–≥–∞
    user_data = context.chat_data.setdefault("spam_tracker", {})
    entry = user_data.get(user.id, {"text": "", "count": 0})

    if message.text == entry["text"]:
        entry["count"] += 1
        await debug_log(
            context,
            f"[SPAM_CHECK] üîÅ –ü–æ–≤—Ç–æ—Ä #{entry['count']} –æ—Ç {user.id}",
        )
    else:
        entry["text"] = message.text
        entry["count"] = 1
        await debug_log(
            context,
            f"[SPAM_CHECK] ‚úèÔ∏è –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {user.id}, —Å—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω",
        )

    user_data[user.id] = entry

    if entry["count"] >= 3:
        try:
            until_date = update.message.date + timedelta(hours=1)
            await context.bot.restrict_chat_member(
                chat_id=chat.id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=False),
                until_date=until_date,
            )
            await message.reply_text(
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 —á–∞—Å –∑–∞ —Å–ø–∞–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
            )
            entry["count"] = 0
            await debug_log(
                context,
                f"[SPAM_CHECK] üîá {user.full_name} ({user.id}) –∑–∞–º—É—á–µ–Ω –Ω–∞ 1 —á–∞—Å –∑–∞ —Å–ø–∞–º",
            )
        except Exception as e:
            await debug_log(context, f"[SPAM_CHECK] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –∑–∞ —Å–ø–∞–º: {e}")
