from telegram import Update
from telegram.ext import ContextTypes


# üö´ –ë–ê–ù
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(
        context,
        f"[BAN] üõ° –ö–æ–º–∞–Ω–¥–∞ /ban –≤—ã–∑–≤–∞–Ω–∞: {user.full_name if user else '‚Äî'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}",
    )

    is_anonymous_admin = (
        user
        and user.is_bot
        and user.username == "GroupAnonymousBot"
        and sender_chat
        and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[BAN] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = member.status in ("administrator", "creator") and getattr(
            member, "can_restrict_members", False
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–∞–Ω.")
        await debug_log(context, "[BAN] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–∞–Ω —É –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ")
        return

    parts = message.text.strip().split()
    command = parts[0].lower()
    raw_args = parts[1:]
    target = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user

    elif raw_args:
        arg = raw_args[0]
        if arg.isdigit():
            try:
                member = await context.bot.get_chat_member(chat.id, int(arg))
                target = member.user
            except Exception as e:
                await message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {e}")
                await debug_log(context, f"[BAN] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ID: {repr(e)}")
                return
        elif arg.startswith("@"):
            try:
                username = arg[1:]  # —É–¥–∞–ª—è–µ–º "@"
                user_info = await context.bot.get_chat(username)
                member = await context.bot.get_chat_member(chat.id, user_info.id)
                target = member.user
            except Exception as e:
                await message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
                await debug_log(
                    context, f"[BAN] ‚ùå –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ username: {repr(e)}"
                )
                return
        else:
            await message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username)."
            )
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[BAN] ‚ùå –¶–µ–ª—å –±–∞–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    target_member = await context.bot.get_chat_member(chat.id, target.id)
    if target_member.status in ("administrator", "creator"):
        await message.reply_text("üö´ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await debug_log(
            context, f"[BAN] üö´ –ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {target.full_name}"
        )
        return

    try:
        await context.bot.ban_chat_member(chat.id, target.id)
        await debug_log(
            context, f"[BAN] ‚úÖ –ó–∞–±–∞–Ω–µ–Ω: {target.full_name} (ID: {target.id})"
        )
        mention = target.mention_html()
        await message.reply_html(f"üö´ {mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
        await log_event(target, "ban", f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å: {e}")
        await debug_log(
            context, f"[BAN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ {target.full_name}: {repr(e)}"
        )

    if command.startswith("!ban"):
        try:
            await message.delete()
            await debug_log(context, "[BAN] üóë –ö–æ–º–∞–Ω–¥–∞ !ban —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass
    ...


# ‚úÖ –†–ê–ó–ë–ê–ù
async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(
        context,
        f"[UNBAN] üì• –ö–æ–º–∞–Ω–¥–∞ /unban –≤—ã–∑–≤–∞–Ω–∞: {user.full_name if user else sender_chat.title}",
    )

    is_authorized = False
    if (
        user
        and user.username == "GroupAnonymousBot"
        and sender_chat
        and sender_chat.id == chat.id
    ):
        is_authorized = True
        await debug_log(context, "[UNBAN] ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω")
    elif user:
        try:
            member = await context.bot.get_chat_member(chat.id, user.id)
            is_authorized = member.status in ("administrator", "creator") and getattr(
                member, "can_restrict_members", False
            )
        except Exception as e:
            await debug_log(context, f"[UNBAN] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–±–∞–Ω.")
        await debug_log(context, "[UNBAN] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    parts = message.text.strip().split()
    raw_args = parts[1:] if len(parts) > 1 else []
    target_id = None
    target_name = None

    if message.reply_to_message and message.reply_to_message.from_user:
        target = message.reply_to_message.from_user
        target_id = target.id
        target_name = target.full_name
    elif raw_args:
        arg = raw_args[0]
        try:
            if arg.isdigit():
                target_id = int(arg)
                target = await context.bot.get_chat(target_id)
                target_name = target.full_name
            elif arg.startswith("@"):
                user_info = await context.bot.get_chat(arg)
                target_id = user_info.id
                target_name = user_info.full_name
            else:
                await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(context, f"[UNBAN] ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.")
        return

    if not target_id:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[UNBAN] ‚ùå –¶–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    try:
        result = await context.bot.unban_chat_member(
            chat.id, target_id, only_if_banned=True
        )
        mention = f"<a href='tg://user?id={target_id}'>{target_name or target_id}</a>"
        if result:
            await message.reply_html(f"‚úÖ {mention} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            await debug_log(context, f"[UNBAN] ‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω: {target_name or target_id}")
        else:
            await message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ.")
            await debug_log(
                context, f"[UNBAN] ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –±–∞–Ω–µ"
            )
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å: {e}")
        await debug_log(
            context, f"[UNBAN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ {target_id}: {e}"
        )
    ...


# üë¢ –ö–ò–ö
async def kick_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(
        context,
        f"[KICK] üõ° /kick –≤—ã–∑–≤–∞–Ω: {user.full_name if user else 'None'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}",
    )

    is_anonymous_admin = (
        user
        and user.is_bot
        and user.username == "GroupAnonymousBot"
        and sender_chat
        and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[KICK] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = member.status in ("administrator", "creator") and getattr(
            member, "can_restrict_members", False
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await debug_log(
            context,
            f"[KICK] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–∏–∫ —É {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
        )
        return

    parts = message.text.strip().split()
    command = parts[0].lower()
    raw_args = parts[1:]
    target = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user

    elif raw_args:
        arg = raw_args[0]
        try:
            if arg.isdigit():
                member = await context.bot.get_chat_member(chat.id, int(arg))
            elif arg.startswith("@"):
                member = await context.bot.get_chat_member(chat.id, arg)
            else:
                await message.reply_text(
                    "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username)."
                )
                return
            target = member.user
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(
                context, f"[KICK] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ {arg}: {e}"
            )
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[KICK] ‚ùå –¶–µ–ª—å –∫–∏–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    target_member = await context.bot.get_chat_member(chat.id, target.id)
    if target_member.status in ("administrator", "creator"):
        await message.reply_text("üö´ –ù–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await debug_log(
            context, f"[KICK] üö´ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {target.full_name}"
        )
        return

    try:
        await context.bot.ban_chat_member(chat.id, target.id, until_date=0)
        await debug_log(
            context, f"[KICK] ‚úÖ –ò—Å–∫–ª—é—á—ë–Ω: {target.full_name} ({target.id})"
        )
        mention = target.mention_html()
        await message.reply_html(f"üë¢ {mention} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å: {e}")
        await debug_log(context, f"[KICK] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ {target.id}: {e}")

    if command.startswith("!kick"):
        try:
            await message.delete()
            await debug_log(context, "[KICK] üóë –ö–æ–º–∞–Ω–¥–∞ !kick —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass
    ...


# üîá –ú–£–¢
async def mute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(
        context,
        f"[MUTE] üõ° /mute –≤—ã–∑–≤–∞–Ω: {user.full_name if user else 'None'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}",
    )

    is_anonymous_admin = (
        user
        and user.is_bot
        and user.username == "GroupAnonymousBot"
        and sender_chat
        and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[MUTE] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = member.status in ("administrator", "creator") and getattr(
            member, "can_restrict_members", False
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–µ–∑–∑–≤—É—á–∏–≤–∞–Ω–∏–µ.")
        await debug_log(
            context,
            f"[MUTE] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ /mute —É {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
        )
        return

    parts = message.text.strip().split()
    if not parts:
        await message.reply_text(
            "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /mute @user 10min"
        )
        return

    command = parts[0].lower()
    raw_args = parts[1:]
    target = None
    duration = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user
        if raw_args:
            duration = raw_args[0]
        else:
            await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä: /mute 5min")
            return

    elif len(raw_args) >= 2:
        target_str, duration = raw_args[0], raw_args[1]
        try:
            if target_str.isdigit():
                member = await context.bot.get_chat_member(chat.id, int(target_str))
            elif target_str.startswith("@"):
                member = await context.bot.get_chat_member(chat.id, target_str)
            else:
                await message.reply_text(
                    "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ @username)."
                )
                return
            target = member.user
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(
                context, f"[MUTE] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ {target_str}: {e}"
            )
            return
    else:
        await message.reply_text(
            "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä: /mute @user 10min –∏–ª–∏ /mute 5min –≤ –æ—Ç–≤–µ—Ç"
        )
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[MUTE] ‚ùå –¶–µ–ª—å –º—É—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    target_member = await context.bot.get_chat_member(chat.id, target.id)
    if target_member.status in ("administrator", "creator"):
        await message.reply_text("üö´ –ù–µ–ª—å–∑—è –æ–±–µ–∑–∑–≤—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await debug_log(
            context, f"[MUTE] üö´ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–µ–∑–∑–≤—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {target.full_name}"
        )
        return

    until_date = None
    msk_display = "–Ω–∞–≤—Å–µ–≥–¥–∞"

    if duration:
        duration = duration.replace(" ", "")
        time_match = re.match(r"(\d+)([a-zA-Z–∞-—è–ê-–Ø]+)", duration)
        if not time_match:
            await message.reply_text(
                "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä—ã: 10min, 2h, 3d, 1mon, 1y\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã:\n"
                "- –º–∏–Ω: min, m, –º–∏–Ω\n"
                "- —á–∞—Å—ã: h, —á\n"
                "- –¥–Ω–∏: d, –¥, day\n"
                "- –º–µ—Å—è—Ü—ã: mon, mo, –º–µ—Å\n"
                "- –≥–æ–¥—ã: y, yr, –≥"
            )
            await debug_log(
                context, f"[MUTE] ‚ùå –ù–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∞—Å—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"
            )
            return

        value, unit = time_match.groups()
        try:
            value = int(value)
        except:
            await message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        unit = unit.lower()
        now = datetime.utcnow()

        if unit in ("min", "m", "–º–∏–Ω"):
            until_date = now + timedelta(minutes=value)
        elif unit in ("h", "—á"):
            until_date = now + timedelta(hours=value)
        elif unit in ("d", "–¥", "day"):
            until_date = now + timedelta(days=value)
        elif unit in ("mon", "mo", "–º–µ—Å"):
            until_date = now + timedelta(days=30 * value)
        elif unit in ("y", "yr", "–≥"):
            until_date = now + timedelta(days=365 * value)
        else:
            await message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 10min, 2h, 3d, 1mon, 1y\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã:\n"
                "- –º–∏–Ω: min, m, –º–∏–Ω\n"
                "- —á–∞—Å—ã: h, —á\n"
                "- –¥–Ω–∏: d, –¥, day\n"
                "- –º–µ—Å—è—Ü—ã: mon, mo, –º–µ—Å\n"
                "- –≥–æ–¥—ã: y, yr, –≥"
            )
            await debug_log(context, f"[MUTE] ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —é–Ω–∏—Ç: {unit}")
            return

        msk_display = (until_date + timedelta(hours=3)).strftime("%Y-%m-%d %H:%M")

    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=target.id,
            permissions=telegram.ChatPermissions(can_send_messages=False),
            until_date=until_date,
        )
        await debug_log(
            context, f"[MUTE] ‚úÖ –û–±–µ–∑–∑–≤—É—á–µ–Ω: {target.full_name} –¥–æ {until_date}"
        )
        await message.reply_text(
            f"üîá {target.full_name} –æ–±–µ–∑–∑–≤—É—á–µ–Ω –¥–æ {msk_display} –ø–æ –ú–°–ö."
        )
        await log_event(target, "mute", f"–¥–æ {until_date}")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ–∑–∑–≤—É—á–∏—Ç—å: {e}")
        await debug_log(
            context, f"[MUTE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–µ–∑–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ {target.id}: {e}"
        )

    if command.startswith("!mute"):
        try:
            await message.delete()
            await debug_log(context, "[MUTE] üóë –ö–æ–º–∞–Ω–¥–∞ !mute —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass
    ...


# üîä –†–ê–ó–ú–£–¢
async def unmute_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    sender_chat = message.sender_chat

    await debug_log(
        context,
        f"[UNMUTE] üõ° /unmute –≤—ã–∑–≤–∞–Ω: {user.full_name if user else 'None'}, sender_chat={sender_chat.title if sender_chat else '‚Äî'}",
    )

    is_anonymous_admin = (
        user
        and user.is_bot
        and user.username == "GroupAnonymousBot"
        and sender_chat
        and sender_chat.id == chat.id
    )

    is_authorized = False
    if is_anonymous_admin:
        await debug_log(context, "[UNMUTE] ‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        is_authorized = True
    elif user:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_authorized = member.status in ("administrator", "creator") and getattr(
            member, "can_restrict_members", False
        )

    if not is_authorized:
        await message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–º—É—Ç.")
        await debug_log(
            context,
            f"[UNMUTE] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ /unmute —É {user.full_name if user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
        )
        return

    parts = message.text.strip().split()
    command = parts[0].lower()
    raw_args = parts[1:]
    target = None

    if message.reply_to_message:
        target = message.reply_to_message.from_user

    elif raw_args:
        arg = raw_args[0]
        try:
            if arg.isdigit():
                member = await context.bot.get_chat_member(chat.id, int(arg))
            elif arg.startswith("@"):
                member = await context.bot.get_chat_member(chat.id, arg)
            else:
                await message.reply_text(
                    "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username)."
                )
                return
            target = member.user
        except Exception as e:
            await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await debug_log(
                context, f"[UNMUTE] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ {arg}: {e}"
            )
            return
    else:
        await message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–ø–ª–∞–π, ID –∏–ª–∏ @username).")
        return

    if not target:
        await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await debug_log(context, "[UNMUTE] ‚ùå –¶–µ–ª—å —Ä–∞–∑–º—É—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        return

    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=target.id,
            permissions=telegram.ChatPermissions(can_send_messages=True),
        )
        await debug_log(
            context, f"[UNMUTE] ‚úÖ –†–∞–∑–º—É—á–µ–Ω: {target.full_name} ({target.id})"
        )
        mention = target.mention_html()
        await message.reply_html(f"üîä {mention} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å: {e}")
        await debug_log(context, f"[UNMUTE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ {target.id}: {e}")

    if command.startswith("!unmute"):
        try:
            await message.delete()
            await debug_log(context, "[UNMUTE] üóë –ö–æ–º–∞–Ω–¥–∞ !unmute —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞")
        except:
            pass
    ...
