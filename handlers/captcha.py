import random

import telegram
from sqlalchemy import update as sql_update
from telegram import Update
from telegram.ext import ContextTypes

from database import async_session
from models.users import User
from utils.logger import debug_log
from utils.user_events import log_event

# –ö–ê–ü–ß–ê –ü–†–ò –í–•–û–î–ï - –í–´–í–û–î
CAPTCHA_EMOJIS = ["ü´ñ", "‚òïÔ∏è", "üßã", "üçµ", "üç∫", "üßÉ", "ü•§", "ü•É"]


async def on_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for user in update.message.new_chat_members:
        if user.is_bot:
            continue
        chat_id = update.effective_chat.id
        async with async_session() as session:
            # –û—á–∏—Å—Ç–∫–∞ left_at, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
            async with async_session() as session:
                await session.execute(
                    sql_update(User).where(User.user_id == user.id).values(left_at=None)
                )
                await session.commit()
        await log_event(user, "join", "–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")
        await debug_log(
            context,
            f"[CAPTCHA_JOIN] üÜï –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.full_name} (ID: {user.id})",
        )

        # –ú—É—Ç–∏–º –ø—Ä–∏ –≤—Ö–æ–¥–µ
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=False),
            )
            await debug_log(
                context,
                f"[CAPTCHA_JOIN] üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–º—É—á–µ–Ω –¥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏",
            )
        except Exception as e:
            await debug_log(
                context, f"[CAPTCHA_JOIN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–ø—á—É
        correct = random.choice(CAPTCHA_EMOJIS)
        fake = random.sample([e for e in CAPTCHA_EMOJIS if e != correct], 3)
        options = fake + [correct]
        random.shuffle(options)

        keyboard = telegram.InlineKeyboardMarkup(
            [
                [
                    telegram.InlineKeyboardButton(
                        e, callback_data=f"captcha:{user.id}:{e}:{correct}"
                    )
                ]
                for e in options
            ]
        )

        try:
            msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n–î–∞–≤–∞–π —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç!\n–ù–∞–∂–º–∏ –Ω–∞ —ç–º–æ–¥–∑–∏: {correct}",
                reply_markup=keyboard,
            )
            await debug_log(
                context,
                f"[CAPTCHA_JOIN] üì© –ö–∞–ø—á–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.message_id}",
            )
            context.chat_data[user.id] = {"captcha_msg_id": msg.message_id}
        except Exception as e:
            await debug_log(
                context, f"[CAPTCHA_JOIN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏: {e}"
            )

        try:
            context.job_queue.run_once(
                kick_if_no_captcha,
                when=300,
                data={"chat_id": chat_id, "user_id": user.id},
                name=str(user.id),
            )
            await debug_log(
                context,
                f"[CAPTCHA_JOIN] ‚è± –¢–∞–π–º–µ—Ä –∫–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id={user.id}",
            )
        except Exception as e:
            await debug_log(
                context, f"[CAPTCHA_JOIN] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∏–∫–∞: {e}"
            )


# –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ö–ê–ü–ß–ò
async def handle_captcha_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    chat_id = query.message.chat.id
    parts = query.data.split(":")
    uid, pressed, correct = int(parts[1]), parts[2], parts[3]

    await debug_log(
        context,
        f"[CAPTCHA_PRESS] üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–ø—á–∏: user_id={user.id}, –Ω–∞–∂–∞–ª={pressed}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π={correct}",
    )

    if user.id != uid:
        await query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–∞–ø—á–∞", show_alert=True)
        await debug_log(
            context,
            f"[CAPTCHA_PRESS] ‚õî –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å —á—É–∂—É—é –∫–∞–ø—á—É: {user.id} != {uid}",
        )
        return

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–∏–∫
    for j in context.job_queue.get_jobs_by_name(str(user.id)):
        j.schedule_removal()
    await debug_log(context, f"[CAPTCHA_PRESS] ‚èπ –¢–∞–π–º–µ—Ä –∫–∏–∫–∞ —Å–Ω—è—Ç: user_id={user.id}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
    try:
        msg_id = context.chat_data.get(user.id, {}).get("captcha_msg_id")
        if msg_id:
            await context.bot.delete_message(chat_id, msg_id)
            await debug_log(
                context, f"[CAPTCHA_PRESS] üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏: msg_id={msg_id}"
            )
    except Exception as e:
        await debug_log(context, f"[CAPTCHA_PRESS] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–ø—á–∏: {e}")

    if pressed == correct:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user.id,
                permissions=telegram.ChatPermissions(can_send_messages=True),
            )
            await context.bot.send_message(
                chat_id, f"‚úÖ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
            )
            await debug_log(
                context, f"[CAPTCHA_PRESS] üîì –†–∞–∑–º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}"
            )
        except Exception as e:
            await debug_log(context, f"[CAPTCHA_PRESS] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")
    else:
        try:
            await context.bot.send_message(
                chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
            )
            await context.bot.ban_chat_member(chat_id, user.id)
            await debug_log(
                context,
                f"[CAPTCHA_PRESS] üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∫–∏–∫–Ω—É—Ç –∑–∞ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–∞–ø—á—É",
            )
        except Exception as e:
            await debug_log(context, f"[CAPTCHA_PRESS] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")


# –ö–ê–ü–ß–ê - –ê–í–¢–û–ö–ò–ö –ü–û –¢–ê–ô–ú–ï–†–£
async def kick_if_no_captcha(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    chat_id = data["chat_id"]
    user_id = data["user_id"]

    await debug_log(
        context, f"[CAPTCHA_TIMEOUT] ‚è∞ –¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫ ‚Äî –∫–∏–∫: user_id={user_id}"
    )
    try:
        await context.bot.ban_chat_member(chat_id, user_id)
        await context.bot.unban_chat_member(chat_id, user_id)
        await debug_log(
            context,
            f"[CAPTCHA_TIMEOUT] üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∫–∏–∫–Ω—É—Ç –ø–æ —Ç–∞–π–º–µ—Ä—É –∫–∞–ø—á–∏",
        )
    except Exception as e:
        await debug_log(
            context, f"[CAPTCHA_TIMEOUT] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∫–∏–∫–µ user_id={user_id}: {e}"
        )
